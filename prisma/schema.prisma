// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl     = env("DIRECT_URL")
}

enum UserRole{
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  username      String?
  email         String?   @unique
  image         String?
  password      String?
  accounts      Account[]
  role          UserRole @default(USER)
  prompt        Prompt[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Prompt {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  post        String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  upVote      Int
  tags        TagsOnPrompts[]
}

model Tag {
  id          String @id @default(cuid())
  name        String
  prompts     TagsOnPrompts[]
}


model TagsOnPrompts{
  id          String   @id @default(cuid())
  prompt      Prompt   @relation(fields: [promptId], references: [id])
  promptId    String   
  tag         Tag      @relation(fields: [tagId], references: [id])
  tagId       String
  assignedAt  DateTime @default(now())
}